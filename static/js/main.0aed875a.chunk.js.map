{"version":3,"sources":["components/molecules/NoteComponent.tsx","components/atoms/DummyData.ts","components/screens/HomeScreen.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["NoteComponent","id","name","placeholder","useState","noteText","updateNoteText","css","colors","YELLOW_200","GRAY_300","GRAY_200","value","onChange","target","newNoteData","text","notesList","HomeScreen","newNote","updateNewNote","noteContentLgWidth","withParentColumns","noteContentMdWidth","noteContentSmWidth","className","lg","md","sm","padding","alignContent","paddingBottom","color","GRAY_500","mediaQueries","SMALL_TABLET_MIN_WIDTH","justifyContent","onClick","fill","BLUE_200","size","SvgSizes","LG","title","map","note","index","key","Root","to","App","exact","component","path","Boolean","window","location","hostname","match","console","log","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0aed875a.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Card,\n  colors,\n  DivFlex,\n  TextareaElement,\n} from \"@the-ksquare-group/zanma-react-components\";\n\ninterface INoteComponentProps {\n  id?: string;\n  name?: string;\n  placeholder?: string;\n}\n\nexport const NoteComponent: React.FC<INoteComponentProps> = ({\n  id = \"noteComponent\",\n  name = \"noteField\",\n  placeholder = \"Insert text here\",\n}) => {\n  const [noteText, updateNoteText] = useState(\"\");\n\n  const handleChangeTextarea = ({\n    target: { value },\n  }: React.ChangeEvent<HTMLTextAreaElement>) => {\n    updateNoteText(value);\n  };\n\n  return (\n    <Card\n      css={`\n        background-color: ${colors.YELLOW_200};\n      `}\n    >\n      <DivFlex>\n        <TextareaElement\n          css={`\n            border: 1px solid transparent;\n\n            &::placeholder {\n              color: ${colors.GRAY_300};\n            }\n            &:active,\n            &:focus {\n              border-color: ${colors.GRAY_200};\n            }\n          `}\n          id={id}\n          name={name}\n          placeholder={placeholder}\n          value={noteText}\n          onChange={handleChangeTextarea}\n        />\n      </DivFlex>\n    </Card>\n  );\n};\n","export const newNoteData = { text: \"\" };\nexport const notesList = [newNoteData];\n","import React, { useState } from \"react\";\nimport {\n  AddCircleOutlineIcon,\n  colors,\n  Column,\n  DivFlex,\n  DivGeneral,\n  H2,\n  H3,\n  H4,\n  mediaQueries,\n  Row,\n  SvgSizes,\n  TertiaryButton,\n  withParentColumns,\n  Wrapper,\n} from \"@the-ksquare-group/zanma-react-components\";\nimport { NoteComponent } from \"../molecules/NoteComponent\";\nimport { notesList, newNoteData } from \"../atoms/DummyData\";\n\nexport const HomeScreen: React.FC = () => {\n  const [newNote, updateNewNote] = useState(notesList);\n\n  const handleClickAddNote = () => {\n    updateNewNote([...newNote, newNoteData]);\n  };\n\n  const noteContentLgWidth = withParentColumns(12);\n  const noteContentMdWidth = withParentColumns(8);\n  const noteContentSmWidth = withParentColumns(4);\n\n  return (\n    <Wrapper className=\"homeScreen-wrapper\" css=\"width: auto;\">\n      <Row className=\"header-row\">\n        <Column\n          className=\"header-column\"\n          lg={noteContentLgWidth(12)}\n          md={noteContentMdWidth(8)}\n          sm={noteContentSmWidth(4)}\n        >\n          <DivGeneral padding=\"32px 0 48px\">\n            <DivFlex alignContent=\"center\" paddingBottom=\"24px\">\n              <H2 color={colors.GRAY_500}>Sticky Notes App</H2>\n            </DivFlex>\n            <DivFlex alignContent=\"center\" paddingBottom=\"24px\">\n              <H3 color={colors.GRAY_300}>Welcome User!</H3>\n            </DivFlex>\n            <DivFlex alignContent=\"center\" paddingBottom=\"24px\">\n              <H4 color={colors.GRAY_200} css=\"text-transform: none;\">\n                To start writing and organizing your life click on the note\n                below.\n              </H4>\n            </DivFlex>\n          </DivGeneral>\n        </Column>\n      </Row>\n\n      <Row className=\"body-row\">\n        <DivFlex\n          css={`\n            flex: 1;\n            flex-direction: column;\n            @media (min-width: ${mediaQueries.SMALL_TABLET_MIN_WIDTH}) {\n              flex-direction: row;\n            }\n          `}\n        >\n          <Column\n            className=\"leftSide-column\"\n            css={`\n              border-bottom: 1px solid ${colors.GRAY_200};\n              padding: 16px 0;\n              @media (min-width: ${mediaQueries.SMALL_TABLET_MIN_WIDTH}) {\n                border-bottom: none;\n                border-right: 1px solid ${colors.GRAY_200};\n              }\n            `}\n            justifyContent=\"center\"\n            lg={noteContentLgWidth(1)}\n            md={noteContentMdWidth(1)}\n            sm={noteContentSmWidth(4)}\n          >\n            <TertiaryButton onClick={handleClickAddNote}>\n              <DivFlex justifyContent=\"center\">\n                <AddCircleOutlineIcon\n                  fill={colors.BLUE_200}\n                  size={SvgSizes.LG}\n                  title=\"Add note\"\n                />\n              </DivFlex>\n            </TertiaryButton>\n          </Column>\n          <Column\n            className=\"rightSide-column\"\n            css=\"padding: 8px 0;\"\n            lg={noteContentLgWidth(11)}\n            md={noteContentMdWidth(7)}\n            sm={noteContentSmWidth(4)}\n          >\n            <Row\n              className=\"cards-row\"\n              css={`\n                margin: 0;\n                @media (min-width: ${mediaQueries.SMALL_TABLET_MIN_WIDTH}) {\n                  margin-left: -8px;\n                  margin-right: -8px;\n                }\n              `}\n            >\n              {newNote.map((note, index) => (\n                <Column\n                  className=\"card-column\"\n                  css=\"padding: 8px 0;\"\n                  key={`noteColumn-${index}`}\n                  lg={noteContentLgWidth(3.5)}\n                  md={noteContentMdWidth(3.5)}\n                  sm={noteContentSmWidth(4)}\n                >\n                  <NoteComponent\n                    id={`noteId-${index}`}\n                    key={`noteKey-${index}`}\n                    name={`noteName-${index}`}\n                  />\n                </Column>\n              ))}\n            </Row>\n          </Column>\n        </DivFlex>\n      </Row>\n    </Wrapper>\n  );\n};\n","import * as React from \"react\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport { HomeScreen } from \"./components/screens/HomeScreen\";\n\nconst Root: React.FC = () => {\n  return <Redirect to=\"/sticky_notes_app\" />;\n};\n\nexport const App: React.FC = () => {\n  return (\n    <React.Fragment>\n      <Switch>\n        <Route exact component={Root} path=\"/\" />\n        <Route component={HomeScreen} path=\"/sticky_notes_app\" />\n      </Switch>\n    </React.Fragment>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconsole.log(\"VERSION: 0.1.2\");\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n\n  document.getElementById(\"root\") as HTMLElement\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}